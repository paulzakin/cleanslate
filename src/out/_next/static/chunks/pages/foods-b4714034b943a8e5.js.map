{"version":3,"file":"static/chunks/pages/foods-b4714034b943a8e5.js","mappings":"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","sources":["webpack://_N_E/?5300","webpack://_N_E/./components/navbar/Navbar.tsx","webpack://_N_E/./components/list/Density/DensityButton.tsx","webpack://_N_E/./components/list/Density/DensityItem.tsx","webpack://_N_E/./constants/groups.ts","webpack://_N_E/./helpers/sortByCaloricDensity.ts","webpack://_N_E/./helpers/sortByCombinedDensity.ts","webpack://_N_E/./helpers/sortByProteinDensity.ts","webpack://_N_E/./helpers/sortByDensity.ts","webpack://_N_E/./pages/foods.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/foods\",\n      function () {\n        return require(\"private-next-pages/foods.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/foods\"])\n      });\n    }\n  ","import { css } from '@emotion/react'\nimport Link from 'next/link'\nimport { colors } from '../../theme'\n\nexport const Navbar = () => {\n  return (\n    <nav\n      className=\"fr\"\n      css={css`\n        height: 70px;\n        width: 100%;\n        background-color: white;\n        border-bottom: 1px solid ${colors.lightgrey};\n        height: 70px;\n        left: 0;\n        position: fixed;\n        top: 0;\n\n        a {\n          text-decoration: none;\n        }\n      `}\n    >\n      <Link href=\"/\" passHref>\n        <span\n          css={css`\n            font-size: 1.3rem !important;\n            font-weight: 700 !important;\n            padding-left: 30px;\n            padding-right: 30px;\n            cursor: pointer;\n          `}\n        >\n          {' '}\n          Clean Slate\n        </span>\n      </Link>\n      <Link href=\"/\" passHref>\n        <button\n          suppressHydrationWarning={true}\n          type=\"button\"\n          className=\"pink semi-bold normal\"\n          css={css`\n            height: 40px;\n            text-decoration: none !important;\n          `}\n        >\n          App\n        </button>\n      </Link>\n    </nav>\n  )\n}\n","import { css } from '@emotion/react'\nimport { Density, Food } from '../../../models/food'\nimport { blue, green, pink } from '../../../theme'\nimport { calculateFoodDensities } from '../../macros/helpers/calculateDensities'\n\ntype props = {\n  food: Food\n  density: Density\n}\n\nexport const DensityButton: React.FC<props> = ({ density, food }) => {\n  const [caloricDensity, proteinDensity, combinedDensity] =\n    calculateFoodDensities(food)\n  const button = css`\n    border-radius: 5px;\n    padding: 10px;\n  `\n\n  return (\n    <div className=\"end\">\n      {density === 'caloric-density' && (\n        <div css={[button, green]}>{caloricDensity}</div>\n      )}\n      {density === 'protein-density' && (\n        <div css={[button, blue]}>{proteinDensity}</div>\n      )}\n      {density === 'combined-density' && (\n        <div css={[button, pink]}>{combinedDensity}</div>\n      )}\n    </div>\n  )\n}\n","import { css } from '@emotion/react'\nimport { Density, Food } from '../../../models/food'\nimport { Image } from '../../image/Image'\nimport { getImagePath, selectFoodImage } from '../helpers/selectFoodImage'\nimport { DensityButton } from './DensityButton'\n\nconst item = css`\n  margin-top: 20px;\n  > span {\n    margin-right: 20px;\n  }\n`\nexport const DensityItem: React.FC<{ food: Food; density: Density }> = ({\n  density,\n  food,\n}) => {\n  const src = selectFoodImage(food, getImagePath, false)\n  return (\n    <div key={food.name} className={`fr`} css={item}>\n      <Image\n        width={50}\n        height={50}\n        src={src as string}\n        alt=\"Image of the food\"\n      />\n      <span className=\"ml20\">{food.name}</span>\n      {/* @ts-ignore */}\n      <DensityButton food={food} density={density} />\n    </div>\n  )\n}\n","export const baseGroups = [\n  'Dairy',\n  'Fat or sugar',\n  'Fruit',\n  'Grain',\n  'Other',\n  'Protein',\n  'Vegetable',\n] as const\nexport type BaseGroups = (typeof baseGroups)[number]\n\nexport const customGroups = ['Custom'] as const\nexport type CustomGroups = (typeof customGroups)[number]\n\nexport type Group = BaseGroups | CustomGroups\n\nexport const groups: Group[] = [...baseGroups, ...customGroups].sort(\n  (groupA, groupB) => groupA.localeCompare(groupB)\n) as Group[] // sort alphabetically\n","import {\n  calculateFoodDensities,\n  calculateRecipeDensities,\n} from '../components/macros/helpers/calculateDensities'\nimport { calculatePerMacroPerRecipe } from '../components/macros/helpers/calculateMacros'\nimport { Category } from '../constants/categories'\nimport { Food } from '../models/food'\nimport { Recipe } from '../models/recipe'\n\nexport const categoriesToIgnore = [\n  'Beverage',\n  'Nut milk',\n  'Sauce',\n  'Spice',\n  'Stock',\n  'Sweetener',\n  'Vinegar',\n] as Category[]\n\nexport const sortByCaloricDensity = (items: (Food | Recipe)[]) => {\n  return items\n    .sort((itemsA, itemsB) => {\n      const A =\n        itemsA.type === 'food'\n          ? calculateFoodDensities(itemsA)[0]\n          : calculateRecipeDensities(\n              1,\n              calculatePerMacroPerRecipe(itemsA, 'CALORIE', 1, 'COUNT'),\n              calculatePerMacroPerRecipe(itemsA, 'PROTEIN', 1, 'COUNT'),\n              itemsA\n            )[0]\n\n      const B =\n        itemsB.type === 'food'\n          ? calculateFoodDensities(itemsB)[0]\n          : calculateRecipeDensities(\n              1,\n              calculatePerMacroPerRecipe(itemsB, 'CALORIE', 1, 'COUNT'),\n              calculatePerMacroPerRecipe(itemsB, 'PROTEIN', 1, 'COUNT'),\n              itemsB\n            )[0]\n\n      return A - B\n    })\n    .filter((food) => {\n      if (food.type === 'food' && categoriesToIgnore.includes(food.category)) {\n        return false\n      } else {\n        return true\n      }\n    })\n}\n","import {\n  calculateFoodDensities,\n  calculateRecipeDensities,\n} from '../components/macros/helpers/calculateDensities'\nimport { calculatePerMacroPerRecipe } from '../components/macros/helpers/calculateMacros'\nimport { Food } from '../models/food'\nimport { Recipe } from '../models/recipe'\nimport { categoriesToIgnore } from './sortByCaloricDensity'\n\nexport const sortByCombinedDensity = (items: (Food | Recipe)[]) => {\n  return items\n    .sort((itemsA, itemsB) => {\n      const A =\n        itemsA.type === 'food'\n          ? calculateFoodDensities(itemsA)[2]\n          : calculateRecipeDensities(\n              1,\n              calculatePerMacroPerRecipe(itemsA, 'CALORIE', 1, 'COUNT'),\n              calculatePerMacroPerRecipe(itemsA, 'PROTEIN', 1, 'COUNT'),\n              itemsA\n            )[2]\n\n      const B =\n        itemsB.type === 'food'\n          ? calculateFoodDensities(itemsB)[2]\n          : calculateRecipeDensities(\n              1,\n              calculatePerMacroPerRecipe(itemsB, 'CALORIE', 1, 'COUNT'),\n              calculatePerMacroPerRecipe(itemsB, 'PROTEIN', 1, 'COUNT'),\n              itemsB\n            )[2]\n\n      return B - A\n    })\n    .filter((food) => {\n      if (food.type === 'food' && categoriesToIgnore.includes(food.category)) {\n        return false\n      } else {\n        return true\n      }\n    })\n}\n","import {\n  calculateFoodDensities,\n  calculateRecipeDensities,\n} from '../components/macros/helpers/calculateDensities'\nimport { calculatePerMacroPerRecipe } from '../components/macros/helpers/calculateMacros'\nimport { Food } from '../models/food'\nimport { Recipe } from '../models/recipe'\nimport { categoriesToIgnore } from './sortByCaloricDensity'\n\nexport const sortByProteinDensity = (items: (Food | Recipe)[]) => {\n  return items\n    .sort((itemsA, itemsB) => {\n      const A =\n        itemsA.type === 'food'\n          ? calculateFoodDensities(itemsA)[1]\n          : calculateRecipeDensities(\n              1,\n              calculatePerMacroPerRecipe(itemsA, 'CALORIE', 1, 'COUNT'),\n              calculatePerMacroPerRecipe(itemsA, 'PROTEIN', 1, 'COUNT'),\n              itemsA\n            )[1]\n\n      const B =\n        itemsB.type === 'food'\n          ? calculateFoodDensities(itemsB)[1]\n          : calculateRecipeDensities(\n              1,\n              calculatePerMacroPerRecipe(itemsB, 'CALORIE', 1, 'COUNT'),\n              calculatePerMacroPerRecipe(itemsB, 'PROTEIN', 1, 'COUNT'),\n              itemsB\n            )[1]\n\n      return B - A\n    })\n    .filter((food) => {\n      if (food.type === 'food' && categoriesToIgnore.includes(food.category)) {\n        return false\n      } else {\n        return true\n      }\n    })\n}\n","import { Density, Food } from '../models/food'\nimport { Recipe } from '../models/recipe'\nimport { sortByCaloricDensity } from './sortByCaloricDensity'\nimport { sortByCombinedDensity } from './sortByCombinedDensity'\nimport { sortByProteinDensity } from './sortByProteinDensity'\n\nexport const sortByDensity = (\n  density: Density,\n  items: Food[]\n): (Food | Recipe)[] => {\n  if (density === 'caloric-density') {\n    return sortByCaloricDensity(items)\n  } else if (density === 'protein-density') {\n    return sortByProteinDensity(items)\n  } else if (density === 'combined-density') {\n    return sortByCombinedDensity(items)\n  } else {\n    throw Error(\n      `Error: sortRecipesByDensity: ${JSON.stringify({ density, items })}`\n    )\n  }\n}\n","import { css } from '@emotion/react'\nimport Head from 'next/head'\nimport React from 'react'\n// @ts-ignore\nimport { DensityItem } from '../components/list/Density/DensityItem'\nimport { Navbar } from '../components/navbar/Navbar'\nimport { createSearcher } from '../components/standard-adder/helpers/createSearcher'\nimport { getSearchResults } from '../components/standard-adder/helpers/getSearchResults'\nimport { Tabs } from '../components/tabs/Tabs'\nimport { Group, groups } from '../constants/groups'\nimport { getBasicFoods } from '../helpers/Food/getBasicFoods'\nimport { sortByDensity } from '../helpers/sortByDensity'\nimport { Density, Food } from '../models/food'\n\nconst Foods = () => {\n  const [searchText, setSearchText] = React.useState('')\n  const [searchResults, setSearchResults] = React.useState([] as Food[])\n  const [density, updateDensity] = React.useState('caloric-density' as Density)\n  const [group, setGroup] = React.useState('All' as Group | 'All')\n\n  const { basicFoods } = getBasicFoods()\n\n  const foodsToUse = basicFoods\n    // To avoid confusion, remove the raw or dry dummy foods\n    .filter((food) => {\n      return (\n        food.name.includes('(raw)') === false &&\n        food.name.includes('(dry)') === false\n      )\n    })\n    // Omit the cooked from the remaining dummy foods\n    .map((food) => {\n      food.name = food.name.replace('(cooked)', '')\n      return food\n    })\n\n  const itemsToRetain = foodsToUse\n    .filter((item) => {\n      return item.type === 'food' && item.foodToProfile === null\n    })\n    .filter((item) => group === 'All' || item.group === group)\n\n  const itemsToRender = sortByDensity(\n    density,\n    searchResults.length > 0 ? searchResults : itemsToRetain\n  )\n\n  const searcher = createSearcher(itemsToRetain)\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const text = event.target.value\n    const searchResults = getSearchResults(text, searcher)\n    setSearchText(text)\n    setSearchResults(searchResults)\n  }\n\n  const tabs = () => {\n    return (\n      <Tabs\n        selected={density}\n        onSelect={(tab: string | null) => {\n          updateDensity(tab as Density)\n        }}\n        css={css`\n          font-size: 0.9rem !important;\n          > button {\n            margin-left: 0;\n            margin-right: 0;\n          }\n\n          > button:nth-of-type(1) {\n            margin-right: 10px;\n          }\n\n          > button:nth-of-type(2) {\n            margin-right: 10px;\n          }\n        `}\n        tabs={{\n          'caloric-density': {\n            image: '',\n            title: 'Caloric density',\n          },\n          // eslint-disable-next-line sort/object-properties\n          'protein-density': {\n            image: '',\n            title: 'Protein density',\n          },\n          'combined-density': {\n            image: '',\n            title: 'Combined density',\n          },\n        }}\n      />\n    )\n  }\n\n  const allFoods = css`\n    margin: 0 auto;\n    max-width: 1000px;\n    width: 90%;\n    padding-bottom: 50px;\n  `\n\n  return (\n    <>\n      <Head>\n        <title>Clean Slate | Foods</title>\n      </Head>\n      <Navbar />\n      <div css={allFoods}>\n        <h1 className=\"huge tcenter mb30 mt120\">Foods</h1>\n        <input\n          type=\"text\"\n          autoCapitalize={'off'}\n          autoComplete={'off'}\n          autoCorrect={'off'}\n          value={searchText}\n          disabled={false}\n          onChange={onChange}\n          placeholder={'Filter by name...'}\n          className={`fr bar list-bar mt20 ${\n            searchText !== '' ? 'active' : ''\n          }`}\n        />\n        <select\n          value={group}\n          onChange={(e) => setGroup((e.target.value as Group) || 'All')}\n          className=\"mt10\"\n        >\n          <option value=\"All\">All groups</option>\n          {groups\n            .filter((group) => !['Custom'].includes(group))\n            .map((group) => (\n              <option value={group} key={group}>\n                {group}\n              </option>\n            ))}\n        </select>\n        <div className=\"w100 mb30 mt10\">{tabs()}</div>\n        {itemsToRender.map((food) => (\n          <DensityItem key={food.id} food={food as Food} density={density} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default Foods\n"],"names":["window","__NEXT_P","push","__webpack_require__","Navbar","_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__","BX","nav","className","css","colors","lightgrey","tZ","Link","href","passHref","span","button","suppressHydrationWarning","type","DensityButton","density","food","param","caloricDensity","proteinDensity","combinedDensity","calculateFoodDensities","emotion_react_jsx_runtime_browser_esm","div","green","blue","pink","item","DensityItem","src","selectFoodImage","getImagePath","Image","width","height","alt","name","groups","sort","groupA","groupB","localeCompare","categoriesToIgnore","sortByCaloricDensity","items","itemsA","itemsB","A","calculateRecipeDensities","calculatePerMacroPerRecipe","B","filter","includes","category","sortByCombinedDensity","sortByProteinDensity","sortByDensity","Error","concat","JSON","stringify","foods","searchText","setSearchText","React","searchResults","setSearchResults","updateDensity","group","setGroup","basicFoods","getBasicFoods","foodsToUse","map","replace","itemsToRetain","foodToProfile","itemsToRender","length","searcher","createSearcher","allFoods","HY","Head","title","h1","input","autoCapitalize","autoComplete","autoCorrect","value","disabled","onChange","text","event","target","getSearchResults","placeholder","select","e","option","Tabs","selected","onSelect","tab","tabs","image","id"],"sourceRoot":""}